KMeansRex : Fast C++ implementation of K-Means using the Eigen matrix template library, with hooks to Matlab and Python/Numpy

This toolbox is meant to be the tyrant lizard king of k-means implementations. It is at least 2x as fast as the native kmeans implementations provided by matlab and scipy. It provides smart modern (kmeans plus plus) initialization as a default. Code is fully vectorized using the excellent Eigen matrix template library.

C++ Usage:
  Include KMeansRexCoreInterface.h
  Use RunKMeans() with necessary parameters
  Compile like that:
    g++ main.cpp -o main -I/path/to/eigen -I/path/to/KMeansRex -L/path/to/KMeansRex -Wl,-rpath=/path/to/KMeansRex -lkmeansrex[32|64]
    Useful flags for eigen are -Wno-ignored-attributes -Wno-misleading-indentation -Wno-deprecated-declarations to suppress endless warnings.
  An example Makefile is provided in examples/Makefile

Matlab Usage [after compiling MEX file]:
  >> X = rand( 1000, 5)
  >> [Mu,Z] = KMeansRex( X, 3 );
  
Python Usage:
  >> import numpy as np;
  >> import KMeansRex
  >> X = np.random.rand( 1000,5)
  >> Mu,Z = KMeansRex.RunKMeans( X, 3);

Compiling:
* Build the shared library libkmeansrex.so from KMeansRexCore.cpp [use optim flags for best performance]
    Change your eigen version, or provide a non-default path to eigen in the EIGEN_INCLUDE variable in the Makefile.
    make

* [Matlab Only] Build the KMeansRex mex executable from source
    mex KMeansRex.cpp ./libkmeansrex.so -I/path/to/eigen

Dependencies:
* Eigen Matrix Template Library (http://eigen.tuxfamily.org)

Author:      
*  Mike Hughes (www.michaelchughes.com). Please email all comments/questions to mike <AT> michaelchughes.com

License:
* This software is released under a BSD 3-clause license. See the LICENSE file for details.

Acknowledgements:
* The development team at Eigen for a blazingly-fast matrix library

